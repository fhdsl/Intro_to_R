# W3 Exercises

## Part 1: Summary statistics

Let's take a short break from looking at cancer cell lines for the moment. Let's consider a sample of penguins.

Run this code once to install the package that will have the penguin data. You can comment it out after you have installed the package.

```{r}
#install.packages("palmerpenguins")
```

Let's load it in, and take a look.

```{r, warnings=F, message=F}
library(tidyverse)
library(palmerpenguins)
head(penguins)
```

Let's examine some summary statistics of this dataset: pick a few columns of interest, and summarize the column via the following functions:

If the columns of interest are numeric, then you can try functions such as `mean()`, `median()`, or `summary()`.

If the columns of interest is character or logical, then you can try the `table()` function.

Within the column, if there are `NA` (a special value indicating "Not Available") elements present, some of these functions will return with a value of `NA`. To remove the `NA` value before computing, some of these function have a `na.rm` argument that you can set to `TRUE`.

All of these functions take in a vector as input and not a dataframe, so you have to access the column as a vector via the `$` operation.

```{r}
mean(penguins$body_mass_g, na.rm=T) #example

#your analysis here
```

Then, pick one of the columns you analyzed and reanalyze it for each of the three species (Adelie, Chinstrap, Gentoo). You will have to at least use the `filter()` function. Do you see any difference across species?

```{r}
adelie = penguins %>% filter(species == "Adelie")
chinstrap = penguins %>% filter(species == "Chinstrap")
gentoo = penguins %>% filter(species == "Gentoo")
mean(adelie$body_mass_g, na.rm=T)
mean(chinstrap$body_mass_g, na.rm=T)
mean(gentoo$body_mass_g, na.rm=T)
```

## Part 2: Interpreting functions

Consider this function, `penguin_bmi()`, that calculates the BMI of a penguin (not actual scientific way of doing it, just a toy example here).

```{r}
penguin_bmi = function(b_length, b_depth, f_length, mass) {
  #takes in beak length, beak depth, fin length, and mass and returns the BMI.
  return(mass / (b_length * b_depth + f_length))
}
```

Write down what data types or data structures the input arguments can take in without running into errors (you may want to try it out yourself!):

*All numeric, or all numeric vectors of the same length.*

Write down what data type or data structure the returning value should be:

*Numeric or numeric vector.*

#### Creating new columns

The `mutate()` function takes in the following arguments: the first argument is the dataframe of interest, and the second argument is a new or existing data variable that is defined in terms of other data variables.

We create a new column `newAge` that is 10 years older than the original `Age` column.

```{r}
penguins$body_mass_g[1:10]
penguins2 = mutate(penguins, body_mass_kg = body_mass_g / 1000)
penguins2$body_mass_kg[1:10]
```

Here's another way of doing it, using the `$` symbol:

```{r}
penguins2$body_mass_kg = penguins$body_mass_g / 1000
```

Create a new column in `penguins` called `bmi` and use `penguin_bmi()` function to compute it, and store the resulting dataframe as a new variable. You can do it via the `mutate()` function, *or* via the `$` symbol.

```{r}
penguins_w_bmi = penguins %>% mutate(bmi = penguin_bmi(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g))
#or
penguins_w_bmi = penguins
penguins_w_bmi$bmi = penguin_bmi(penguins_w_bmi$bill_length_mm, penguins_w_bmi$bill_depth_mm, penguins_w_bmi$flipper_length_mm, penguins_w_bmi$body_mass_g)
```

What is the mean BMI for each of the three species?

```{r}
adelie = penguins_w_bmi %>% filter(species == "Adelie")
chinstrap = penguins_w_bmi %>% filter(species == "Chinstrap")
gentoo = penguins_w_bmi %>% filter(species == "Gentoo")
mean(adelie$bmi, na.rm=T)
mean(chinstrap$bmi, na.rm=T)
mean(gentoo$bmi, na.rm=T)
```

## Part 3: Writing your own function

Suppose that there is a BMI adjustment factor that should be made. Write the function `penguin_bmi_adj()` so that it takes in the same arguments as `penguin_bmi()` and returns .8 times the return value of `penguin_bmi()` function. You should reference `penguin_bmi()` in your function: a powerful abstraction of functions is that other functions can use that function also!

```{r}
penguin_bmi_adj = function(b_length, b_depth, f_length, mass) {
  return(.8 * penguin_bmi(b_length, b_depth, f_length, mass))
}
```

Create a new column in `penguins` called `bmi_adj` and use `penguin_bmi_adj()` to compute it, and store the resulting dataframe as a new variable. You can do it via the `mutate()` function, *or* via the `$` symbol.

```{r}
penguins_w_bmi_adj = penguins %>% mutate(bmi_adj = penguin_bmi_adj(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g))
```

## Part 4: Conditional Statements

Sometimes, our code needs to run a certain way if a condition is met. We have seen example of this via the conditional operator, but we need a more general form. Here, we introduce **conditional statements**. Here's a metaphor of what they do: imagine that each line of code is taking you down a path. At some point, the path splits, and you have a choose a path in the split depending what your variables are in your environment.

*In a conditional statement, if the logical value tested (usually by a comparison operation) is evaluated as `TRUE`, then the body code within the local environment will run. If the logical value tested is evaluated as `FALSE`, then the body code within the local environment will not run. Longer conditional statements can be built from else if and else conditional statements.*

Here are some examples of conditional statement syntax structure:

```         
if(logical_value) {
    ...
}
```

```         
if(boolean_value_1) {
    ...
}else if(boolean_value_2) {
    ...
}else {
  ...
}
```

An example of a function with a conditional statement:

```{r}
human_chr_test = function(numChrs) {
  if(length(numChrs) == 23) {
  	return("human")
  }else{
  	return("non-human")
  }
}
  
human_chr_test(rep(2, 6))
human_chr_test(c(2, 3, 2, 2))
human_chr_test(rep(2, 23))
```

Write a function, called `nucleotide_complement()`, that takes in one argument of a character data type (not a character vector!).

If the input argument is "A", return "T".

Otherwise, if the input argument is "T", return "A".

Otherwise, if the input argument is "C", return "G".

Otherwise, if the input argument is "G", return "C".

Otherwise, if the input is anything else not the above, return `NA`. This is a special value indicating "Not Available".

Use this function on a test cases to show that it works.

```{r}
nucleotide_complement = function(n) {
  if(n == "A") { 
    return("T")
  }else if(n == "T") {
    return("A")
  }else if(n == "C") {
    return("G")
  }else if(n == "G")  {
    return("C")
  } else { 
    return(NA)
  }
}

nucleotide_complement("A")
nucleotide_complement("T")
nucleotide_complement(234)
nucleotide_complement("Whatever, man.")
```

## Feedback!

How many hours did you spend on this exercise?

```{r}
time_spent = 0 
```

If you worked with other peers, write their names down in the following character vector: each element is one person's name.

```{r}
peers = c("myself")
```
