---
title: "W4: Data Wrangling with Tidy Data, Part 2"
format: 
  revealjs:
    smaller: true
    scrollable: true
    echo: true
---
```{r, echo=F, message=F, warning=F, error=F}
library(palmerpenguins)
library(tidyverse)
load(url("https://github.com/fhdsl/Intro_to_R/raw/main/classroom_data/CCLE.RData"))
```

## Modifying and creating new columns

. . .

The `mutate()` function takes in the following arguments: the first argument is the dataframe of interest, and the second argument is a *new or existing data variable* that is defined in terms of *other data variables*.

. . .

```{r}
metadata$Age[1:10]
```

. . .

```{r}
metadata2 = mutate(metadata, olderAge = Age + 10)
```

. . .

```{r}
metadata2$olderAge[1:10]
```

. . .

<br>


```{r}
expression$KRAS_Exp[1:10]
```

. . .

```{r}
expression2 = mutate(expression, log_KRAS_Exp = log(KRAS_Exp))
```

. . .

```{r}
expression2$log_KRAS_Exp[1:10]
```

## Modifying and creating new columns

. . .

Instead of `mutate()` function, we can also create a new or modify a column via the `$` symbol:

```{r}
expression$KRAS_Exp[1:10]
```

. . .

```{r}
expression2 = expression
expression2$log_KRAS_Exp = log(expression2$KRAS_Exp)
```

. . .

```{r}
expression2$log_KRAS_Exp[1:10]
```

## Merging two dataframes together

. . .

`expression`

| ModelID      | PIK3CA_Exp | log_PIK3CA_Exp |
|--------------|------------|----------------|
| "ACH-001113" | 5.138733   | 1.636806       |
| "ACH-001289" | 3.184280   | 1.158226       |
| "ACH-001339" | 3.165108   | 1.152187       |

. . .

`metadata`

| ModelID      | OncotreeLineage | Age |
|--------------|-----------------|-----|
| "ACH-001113" | "Lung"          | 69  |
| "ACH-001289" | "CNS/Brain"     | NA  |
| "ACH-001339" | "Skin"          | 14  |

. . .

I want to compare the relationship between `OncotreeLineage` and `PIK3CA_Exp`:

| ModelID      | PIK3CA_Exp | log_PIK3CA_Exp | OncotreeLineage | Age |
|--------------|------------|----------------|-----------------|-----|
| "ACH-001113" | 5.138733   | 1.636806       | "Lung"          | 69  |
| "ACH-001289" | 3.184280   | 1.158226       | "CNS/Brain"     | NA  |
| "ACH-001339" | 3.165108   | 1.152187       | "Skin"          | 14  |

## Merging two dataframes together

We see that in both dataframes, the rows (observations) represent cell lines with a common column `ModelID`, so let's merge these two dataframes together, using `full_join()`:

```{r}
merged = full_join(metadata, expression, by = "ModelID")
```

. . .

Let's take a look at the dimensions:

. . .

```{r}
dim(metadata)
```

. . .

```{r}
dim(expression)
```

. . .

```{r}
dim(merged)
```

. . .

`full_join()` keeps all observations common to both dataframes based on the common column defined via the `by` argument.

. . .

Therefore, we expect to see `NA` values in `merged`, as there are some cell lines that are not in `expression` dataframe.

## Merging two dataframes together: variations

![](../images/join.png)

. . .

Given `xxx_join(x, y, by = "common_col")`,

-   `full_join()` keeps all observations.

-   `left_join()` keeps all observations in `x`.

-   `right_join()` keeps all observations in `y`.

-   `inner_join()` keeps observations common to both `x` and `y`.

## Grouping and summarizing dataframes

. . .

| ModelID      | OncotreeLineage | Age |
|--------------|-----------------|-----|
| "ACH-001113" | "Lung"          | 69  |
| "ACH-001289" | "Lung"          | 23  |
| "ACH-001339" | "Skin"          | 14  |
| "ACH-002342" | "Brain"         | 23  |
| "ACH-004854" | "Brain"         | 56  |
| "ACH-002921" | "Brain"         | 67  |

. . .

Desired rows: cancer subtype.

Desired columns: mean age.

| OncotreeLineage | MeanAge | Count |
|-----------------|---------|-------|
| "Lung"          | 46      | 2     |
| "Skin"          | 14      | 1     |
| "Brain"         | 48.67   | 3     |

. . .

*The rows I want is described by a column. The columns I want need to be summarized from other columns.*


## Grouping and summarizing dataframes


```{r}
metadata_grouped = group_by(metadata, OncotreeLineage)
metadata_type = summarise(metadata_grouped, MeanAge = mean(Age, na.rm = TRUE), Count = n())
```

. . .

With pipes:

```{r}
metadata_by_type = metadata %>% 
                   group_by(OncotreeLineage) %>% 
                   summarise(MeanAge = mean(Age, na.rm = TRUE),
                             Count = n())
```

. . .

```{r}
head(metadata_type)
```

## Grouping and summarizing dataframes

The `group_by()` function returns the identical input dataframe but remembers which variable(s) have been marked as grouped.

. . .

The `summarise()` returns one row for each combination of grouping variables, and one column for each of the summary statistics that you have specified.

. . .

Functions you can use for `summarise()` must take in a vector and return a simple data type, such as any of our summary statistics functions: `mean()`, `median()`, `min()`, `max()`, etc.

. . .

The exception is `n()`, which returns the number of entries for each grouping variable's value.


## Functions motivation

![](https://cs.wellesley.edu/~cs110/lectures/L16/images/function.png){alt="Function machine from algebra class." width="300"}

. . .

We write functions for two main, often overlapping, reasons:

. . .

1.  Following DRY (Don't Repeat Yourself) principle

. . .

2.  Creates modular structure and abstraction

. . .

Even if you are not writing functions, it is helpful to know how they are constructed to use them. 

## How to define a function

. . .

::: callout-tip
# 

Assign a **function name** with a "function" statement that has a comma-separated list of named **function arguments**. Within the body of the function there is optionally a **return expression**. The function name is stored as a variable in the global environment.
:::

. . .

```{r}
addFunction = function(num1, num2) {
  result = num1 + num2 
  return(result)
}
```

. . .

```{r}
addFunction(3, 4)
```

## How to define a function

```{r}
addFunction = function(num1, num2) {
  result = num1 + num2 
  return(result)
}
addFunction(3, 4)
```

. . .

With function definitions, not all code runs from top to bottom. The first 4 lines defines the function, but the function is never run.

. . .

When the function is called in line 5, the variables for the arguments are reassigned to function arguments to be used within the function. This ensures modularity. 

## Is this function modular?

```{r}
x = 3
y = 4
addFunction = function(num1, num2) {
    result = x + y 
    return(result)
}
```

. . .

```{r}
addFunction(x, y)
```

. . .

```{r}
addFunction(10, -5)
```


## Ways to call the function

. . .

```{r}
addFunction(3, 4)
```

. . .

```{r}
addFunction(num1 = 3, num2 = 4)
```

. . .

```{r}
addFunction(num2 = 4, num1 = 3)
```

. . .

But this *could* give a different result:

```{r}
addFunction(4, 3)
```

## Interpreting functions

```         
?mean

Arithmetic Mean

Description:

     Generic function for the (trimmed) arithmetic mean.

Usage:

     mean(x, ...)
     
     ## Default S3 method:
     mean(x, trim = 0, na.rm = FALSE, ...)
     
Arguments:

       x: An R object.  Currently there are methods for numeric/logical
          vectors and date, date-time and time interval objects.
          Complex vectors are allowed for ‘trim = 0’, only.

    trim: the fraction (0 to 0.5) of observations to be trimmed from
          each end of ‘x’ before the mean is computed.  Values of trim
          outside that range are taken as the nearest endpoint.

   na.rm: a logical evaluating to ‘TRUE’ or ‘FALSE’ indicating whether
          ‘NA’ values should be stripped before the computation
          proceeds.

     ...: further arguments passed to or from other methods.
```

## Interpreting functions

Notice that the arguments `trim = 0`, `na.rm = FALSE` have default values. This means that these arguments are *optional* - you should provide it only if you want to. With this understanding, you can use `mean()` in a new way:

. . .

```{r}
numbers = c(1, 2, NA, 4)
mean(x = numbers, na.rm = TRUE)
```

