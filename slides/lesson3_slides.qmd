---
title: "W3: Data Wrangling with Tidy Data, Part 1"
format: 
  revealjs:
    smaller: true
    scrollable: true
    echo: true
---

## Explicit vs. implicit subsetting

```{r}
age = c(89, 70, 64, 90, 66, 71, 55, 60, 30, 16)
```

. . .

-   **Explicit subsetting**: Given a length 10 vector of people's ages, and subset to the 1st, 5th, and 9th elements.

. . .

```{r}
age[c(1, 5, 9)]
```

. . .

-   **Implicit subsetting**: Given a length 10 vector of people's ages, and subset to elements greater than age 50.

## The third way of vector subsetting

```{r}
staff = c("chris", "sonu", "sean")
```

. . .

Inside the subsetting bracket can be:

3.  A **logical indexing vector** with the same length as the vector to be subsetted. The `TRUE` values indicate which elements to keep, the `FALSE` values indicate which elements to drop.

. . .

```{r}
staff[c(TRUE, FALSE, FALSE)]
```

. . .

```{r}
staff[c(TRUE, TRUE, FALSE)]
```

## Implicit subsetting

**Implicit subsetting**: Given a length 10 vector of people's ages, and subset to elements greater than age 50.

. . .

Use a **comparison operator** to create a logical vector:

. . .

```{r}
age > 50
```

. . .

Can you guess what we do next?

. . .

```{r}
age[age > 50]
```

## Implicit subsetting

Subset a vector **implicitly**, in 3 steps:

. . .

1.  Come up with a criteria for subsetting: "I want to subset to values greater than 50".

. . .

2.  Use a **comparison operator** to create a **logical vector** that fits this criteria.

```{r}
age > 50
```

. . .

3.  Use this logical vector to subset.

```{r}
age[age > 50]
```

. . .

Alternatively,

```{r}
idx = age > 50
age[idx]
```

## Comparison operators

`<` less than

`<=` less or equal than

`>` greater than

`>=` greater than or equal to

`==` equal to

`!=` not equal to

. . .

```{r}
staff = c("chris", "sonu", "sean")
```

Subset `staff` to not have "chris" in it.

. . .

```{r}
staff != "chris"
```

. . .

```{r}
staff[staff != "chris"]
```

## DepMap Project

<https://depmap.org/>

We will work with `metadata`, `mutation`, and `expression` dataframes, as you have become familiar with.

```{r, message=FALSE, echo=F}
library(tidyverse)
load(url("https://github.com/fhdsl/Intro_to_R/raw/main/classroom_data/CCLE.RData"))
```

## Explicit vs implicit ways to subset a dataframe

. . .

ðŸš« Explicit: "I want to filter for rows 20-50 and select columns 2 and 8".

. . .

âœ… Implicit: "I want to filter for rows such that the subtype is breast cancer and select ModelID, Age, and Sex columns."

. . .

*Notice that when we filter for rows in an implicitly way, we often formulate criteria about the columns!*

## How we do it:

. . .

```{r}
library(tidyverse)

breast_metadata = filter(metadata, OncotreeLineage == "Breast")
breast_metadata_ = select(breast_metadata, ModelID, Age, Sex)

head(breast_metadata)
```

. . .

Here, `filter()` and `select()` are functions from the `tidyverse` package.

## `filter()` and `select()`

`metadata_filtered = filter(metadata, OncotreeLineage == "Breast")`:

. . .

The second input: a logical indexing vector built from a comparison operator?

. . .

But the variable `OncotreeLineage` does not exist in our environment!

. . .

Rather, `OncotreeLineage` is a column from `metadata`, and we are referring to it as a **data variable**. We can directly refer to the column vector `metadata$OncotreeLineage` with just `OncotreeLineage`.

. . .

The input arguments for `select()` are also **data variables**.

## Try it our yourself:

-   Rows to filter:

-   Columns to select:

## Summary statistics

If the columns of interest are numeric, consider functions `mean()`, `median()`, `max()`, on a column.

. . .

If the columns of interest is character or logical, consider `table()`.

. . .

```{r}
mean(breast_metadata$Age, na.rm = TRUE)
table(breast_metadata$Sex)
```

## Appendix: Code readability with many nested functions

When combining multiple functions in one expression, it gets harder to read:

. . .

```{r}
breast_metadata = select(filter(metadata, OncotreeLineage == "Breast"), ModelID, Age, Sex)
```

. . .

Or, this: ðŸ¤¨

```         
result2 = function1(function2(function3(dataframe)))
```

. . .

Or... ðŸ¤•

```         
result = function1(function2(function3(dataframe, df_col4, df_col2), arg2), df_col5, arg1)
```

## Appendix: Pipes to make nested functions readable

. . .

```         
result2 = dataframe |> function1 |> function2 |> function3
```

. . .

```         
result = function1(df_col5, arg1) |>
         function2(arg2) |>
         function3(df_col4, df_col2)
```

. . .

Rewrite the `select()` and `filter()` function composition example above using the pipe syntax.

. . .

```{r}
breast_metadata = metadata |> 
  filter(OncotreeLineage == "Breast") |> 
  select(ModelID, Age, Sex)
```

## How was class for you today?

<https://forms.gle/yKzFmYxmpMdsLDhj7>
