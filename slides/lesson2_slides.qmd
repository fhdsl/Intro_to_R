---
title: "W2: Working with data structures"
format: 
  revealjs:
    smaller: true
    scrollable: true
    echo: true
output-location: fragment
---

## Solving problems...

![](images/gator_error.jpg)

. . .

What is a problem you encountered and fixed recently?

## Exercise 1 Continued

-   Three styles of defining and updating variables

## Comparison Operations

Sometimes, we want to make comparisons between data types, such as if one is bigger than the other, or whether they are the same.

```{r}
age = 35

age > 18
```

. . .

```{r}
age <= 65
```

. . .

```{r}
building_name = "Arnold"

building_name == "Weintraub"
```

. . .

```{r}
building_name != "Weintraub"
```

## Full list of Comparison Operations

`<` less than

`<=` less or equal than

`>` greater than

`>=` greater than or equal to

`==` equal to

`!=` not equal to

. . .

You can also write out multiple comparisons at once, which you will see more in your exercise this week...

## Vectors

A **Vector** is a linear ordered collection of a data type.

Each *element* of a vector contains a data type, and all elements of a vector must be the same type, such as numeric, character, or logical.

. . .

Define it via the combine `c()` function:

```{r}
staff = c("chris", "sonu", "sean")
chrNum = c(2, 3, 1)
```

. . .

So, you can have **numeric vector**, **character vector**, and **logical vector**.

## Operations and functions on vectors

Multiplication operation on vectors:

```{r}
chrNum = c(2, 3, 1)
chrNum = chrNum * 3
chrNum 
```

. . .

Multiplication has a new meaning when used on a numeric vector and numeric data type! ðŸ˜®

. . .

Comparison operator on vectors:

```{r}
chrNum = c(2, 3, 1)
chrNum > 2
```

. . .

Functions on vectors: how many elements are in this vector?

```{r}
length(chrNum)
```

## Operations and functions on vectors: can we do this?

How about numeric vector multiplied by numeric vector?

```{r}
chrNum = c(2, 3, 1)
chrNum * c(2, 2, 0)
```

. . .

a numeric vector added to a character vector:

```{r}
#chrNum + staff
```

## Subsetting vectors

```{r}
staff = c("chris", "sonu", "sean")
```

We subset vectors using the bracket `[ ]` operation.

. . .

Inside the bracket can be:

1.  A single numeric value

```{r}
staff[2]
```

. . .

```{r}
staff[3] = "scott"
```

. . .

2.  A **numerical indexing vector** containing numerical values. They dictate which elements of the vector to subset.

```{r}
staff[c(1, 2)]
```

. . .

```{r}
small_staff = staff[c(1, 2)]
small_staff
```

## Subsetting vectors continued

```{r}
staff = c("chris", "sonu", "sean")
```

3.  A **logical indexing vector** with the same length as the vector to be subsetted. The `TRUE` values indicate which elements to keep, the `FALSE` values indicate which elements to drop.

. . .

```{r}
staff[c(TRUE, FALSE, FALSE)]
```

. . .

```{r}
staff[c(TRUE, TRUE, FALSE)]
```

. . .

```{r}
small_staff = staff[c(TRUE, TRUE, FALSE)]
small_staff
```

## A trick: When subsetting large vectors

```{r}
set.seed(123) #don't worry about this function
age = round(runif(100, 1, 100)) #don't worry about these functions
age
```

Suppose you want the first 20 elements of this vector. Writing out `c(1, 2, 3, 4, â€¦` is a pain. We can generate 1 to 20 via the following trick:

```{r}
1:20
```

. . .

Much easier!

```{r}
age[1:20]
```

## Dataframes

. . .

A **dataframe** is a spreadsheet such that each column must have the same data type; a bunch of vectors organized as columns.

. . .

Let's load a Dataframe in, and see what's in it, spreadsheet style!

```{r}
load(url("https://github.com/fhdsl/Intro_to_R/raw/main/classroom_data/CCLE.RData"))
```

`View(metadata)`

## Functions that help us learn about a Dataframe

`head(metadata)`

. . .

`tail(metadata)`

. . .

```{r}
dim(metadata)
```

. . .

The **column name** is a character vector that corresponds to the columns of the dataframe.

```{r}
names(metadata)
```

## Subsetting a column from a dataframe

. . .

The `dataframe$column_name` operation selects for a column by its column name and returns the column as a vector:

. . .

`metadata$OncotreeLineage`

. . .

```{r}
metadata$OncotreeLineage[1:5]
```

. . .

`metadata$Age`

. . .

```{r}
metadata$Age[1:5]
```

. . .

## Subsetting columns and rows from a dataframe

`dataframe[row_idx, col_idx]` subsets the dataframe by a row indexing vector `row_idx`, and a column indexing vector `col_idx`.

. . .

```{r}
metadata[1:5, c(1, 3)]
```

. . .

We can refer to the column names directly:

```{r}
metadata[1:5, c("ModelID", "CellLineName")]
```

## Subsetting columns or rows from a dataframe

We can leave the column index or row index empty to just subset columns or rows. **But keep the comma!!!**

. . .

`metadata[1:5, ]`

. . .

`metadata[, c("ModelID", "CellLineName")]`

## How was class for you today?

<https://forms.gle/wH3bNotnob9ftc7u6>
